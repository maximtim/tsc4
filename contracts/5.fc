{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

forall X -> (tuple) to_tuple (X x) asm "NOP";

(int, int) calc_fn1_fn(int n) asm
  """
    DEC // (n-1)
    0 PUSHINT
    1 PUSHINT
    ROT
    REPEAT:<{    // repeat (n-1)
      TUCK       // a b -> b a b
      ADD        // -> b (a+b)
    }>
  """;

tuple calc_fib_rest(int fn, int fn1, int k) asm(k fn fn1)
  """
    s2 PUSH
    2 SUBCONST
    REPEAT:<{
      DUP2        // a b -> a b a b
      ADD         // a b -> (a+b)
      s3 s2 XCHG  // k a b c -> a k b c
    }>
    ROT
    TUPLEVAR
  """;

tuple calc_fib(int fn, int fn1, int n, int k) asm(k n fn fn1)
  """
    // 10 PUSHINT
    // c7 POP
    //
    ROT
    DEC
    REPEAT:<{    // repeat (n-1)
      TUCK       // a b -> b a b
      ADD        // -> b (a+b)
    }>
    s2 PUSH
    DEC
    REPEAT:<{     // repeat (k-1)
      DUP2        // a b -> a b a b
      ADD         // a b -> (a+b)
      s3 s2 XCHG  // k a b c -> a k b c
    }>
    ROT
    TUPLEVAR
    // c7 PUSH
    1 RETARGS
  """;

tuple calc_fib2(int fn, int fn1, int n, int k) asm
  """
    // 10 PUSHINT
    // c7 POP
    //
    DUP
    1 SETGLOB
    ADD
    2 SUBCONST
    REPEAT:<{    // repeat (n+k-2)
      DUP2       // a b -> a b a b
      ADD        // -> b (a+b)
    }>
    1 GETGLOB
    TUPLEVAR
    // c7 PUSH
    1 RETARGS
  """;

() recv_internal() {
}

;; testable

;; (tuple) fibonacci_sequence (int n, int k) method_id {
;;   if (k == 0) { return empty_tuple(); }

;;   var (f0, f1) = (0, 1);

;;   repeat (n - 1) {
;;     (f0, f1) = (f1, f0 + f1);
;;   }

;;   if (k == 1) { 
;;     if (n == 0) { return to_tuple([0]); }

;;     return to_tuple([f1]); 
;;   }

;;   return n == 0 
;;     ? calc_fib_rest(0, 1, k)
;;     : calc_fib_rest(f1, f0 + f1, k);
;; }

(tuple) fibonacci_sequence (int n, int k) method_id {
  if (k == 0) { return empty_tuple(); }
  if ((k == 1) & (n == 0)) { return to_tuple([0]); }

  return calc_fib2(0, 1, n, k);
}


{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
(slice, slice) load_ref_slice(slice s) asm "LDREFRTOS";

int is_upper_letter?(int symbol) inline {
  return (symbol > 64) & (symbol < 91);
}

int is_lower_letter?(int symbol) inline {
  return (symbol > 96) & (symbol < 123);
}

cell shift_chars(int shift, slice slc) {
  var new_cell_b = begin_cell();
  var s_len = slc.slice_bits() / 8;
  
  repeat (s_len) {
    var char = slc~load_uint(8);

    char = is_upper_letter?(char)
      ? (char - 65 + shift) % (26) + 65
      : is_lower_letter?(char)
        ? (char - 97 + shift) % (26) + 97
        : char;
    
    new_cell_b = new_cell_b
      .store_uint(
        char,
        8);
  }

  cell next = null();

  if (slc.slice_refs() > 0) {
    next = shift_chars(shift, slc~load_ref_slice());
    new_cell_b = new_cell_b.store_ref(next);
  }

  return new_cell_b.end_cell();
}

() recv_internal() {
}

;; testable

(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return shift_chars(shift, text.begin_parse());
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return shift_chars(- shift, text.begin_parse());
}


